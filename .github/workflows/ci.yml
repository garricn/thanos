name: CI
"on":
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  CI: true
  HUSKY: 0
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read .nvmrc
        id: nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> "$GITHUB_OUTPUT"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NODE_VERSION }}
          cache: npm
      - name: Install dependencies
        run: HUSKY=0 npm ci
      - name: Validate GitHub Actions workflows
        run: |
          # Install actionlint using the official download script
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          # Install yaml-lint for YAML validation
          npm install yaml-lint
          # Run YAML linting
          npx yaml-lint -c .yaml-lint.json .github/workflows/*.yml
          # Run actionlint
          ./actionlint -color .github/workflows/*.yml
      - name: Run linters
        run: npm run lint
      - name: Upload logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: lint-logs
          path: |
            ./**/*.log
            ./npm-debug.log*
          retention-days: 7
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read .nvmrc
        id: nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> "$GITHUB_OUTPUT"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NODE_VERSION }}
          cache: npm
      - name: Check package sync
        run: |
          echo "Node version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Checking if package.json and package-lock.json are in sync..."
          HUSKY=0 npm ci --dry-run || { echo "Dry run failed"; npm diff; exit 1; }
      - name: Install dependencies
        run: HUSKY=0 npm ci
      - name: Check types
        run: npm run type-check
      - name: Upload logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: type-check-logs
          path: |
            ./**/*.log
            ./npm-debug.log*
          retention-days: 7
  test:
    name: Unit Tests
    needs:
      - lint
      - type-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read .nvmrc
        id: nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> "$GITHUB_OUTPUT"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NODE_VERSION }}
          cache: npm
      - name: Check package sync
        run: |
          echo "Node version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Checking if package.json and package-lock.json are in sync..."
          HUSKY=0 npm ci --dry-run || { echo "Dry run failed"; npm diff; exit 1; }
      - name: Install dependencies
        run: HUSKY=0 npm ci
      - name: Run tests
        run: npm run test:unit
      - name: Upload logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-logs
          path: |
            ./**/*.log
            ./npm-debug.log*
            ./junit.xml
          retention-days: 7
  snapshot:
    name: Snapshot Tests
    needs:
      - lint
      - type-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read .nvmrc
        id: nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> "$GITHUB_OUTPUT"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NODE_VERSION }}
          cache: npm
      - name: Check package sync
        run: |
          echo "Node version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Checking if package.json and package-lock.json are in sync..."
          HUSKY=0 npm ci --dry-run || { echo "Dry run failed"; npm diff; exit 1; }
      - name: Install dependencies
        run: HUSKY=0 npm ci
      - name: Install nx globally
        run: npm install -g nx
      - name: Run snapshot tests
        run: npm run test:snapshot
      - name: Upload logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-test-logs
          path: |
            ./**/*.log
            ./npm-debug.log*
            ./junit.xml
          retention-days: 7
  security:
    name: Security Check
    needs:
      - lint
      - type-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read .nvmrc
        id: nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> "$GITHUB_OUTPUT"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NODE_VERSION }}
          cache: npm
      - name: Check package sync
        run: |
          echo "Node version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Checking if package.json and package-lock.json are in sync..."
          HUSKY=0 npm ci --dry-run || { echo "Dry run failed"; npm diff; exit 1; }
      - name: Install dependencies
        run: HUSKY=0 npm ci
      - name: Check for Snyk token
        id: check-snyk
        run: |
          if [ -n "${{ secrets.SNYK_TOKEN }}" ]; then
            echo "has_snyk_token=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_snyk_token=false" >> "$GITHUB_OUTPUT"
            echo "::warning::SNYK_TOKEN secret is not set. Security checks will be limited."
          fi
      - name: Run Snyk security audit
        if: steps.check-snyk.outputs.has_snyk_token == 'true'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: npm run security:check
      - name: Run npm audit as fallback
        if: steps.check-snyk.outputs.has_snyk_token != 'true'
        run: |
          echo "Running npm audit as fallback security check..."
          npm audit || true
      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            ./**/*.log
            ./npm-debug.log*
            ./snyk-report.json
          retention-days: 7
  e2e:
    name: E2E Tests
    needs:
      - lint
      - type-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read .nvmrc
        id: nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> "$GITHUB_OUTPUT"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NODE_VERSION }}
          cache: npm
      - name: Check package sync
        run: |
          echo "Node version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Checking if package.json and package-lock.json are in sync..."
          HUSKY=0 npm ci --dry-run || { echo "Dry run failed"; npm diff; exit 1; }
      - name: Install dependencies
        run: HUSKY=0 npm ci
      - name: Install nx globally
        run: npm install -g nx
      - name: Build API and Web
        run: |
          npm run build -- --projects=api,web
      - name: Start servers in background
        run: |
          npm run start:api &
          echo "API server started, waiting for it to be ready..."
          sleep 20
          npm run start:web &
          echo "Web server started, waiting for it to be ready..."
          sleep 20
      - name: Run E2E tests
        run: nx e2e web-e2e
      - name: Upload logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: e2e-logs
          path: |
            ./**/*.log
            ./npm-debug.log*
            ./cypress/screenshots/**/*
            ./cypress/videos/**/*
          retention-days: 7
  coverage:
    name: Code Coverage
    needs:
      - test
      - snapshot
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Read .nvmrc
        id: nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> "$GITHUB_OUTPUT"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NODE_VERSION }}
          cache: npm
      - name: Check package sync
        run: |
          echo "Node version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Checking if package.json and package-lock.json are in sync..."
          HUSKY=0 npm ci --dry-run || { echo "Dry run failed"; npm diff; exit 1; }
      - name: Install dependencies
        run: HUSKY=0 npm ci
      - name: Install nx globally
        run: npm install -g nx
      - name: Generate coverage
        run: npm run coverage
      - name: List coverage files
        run: find coverage -type f | grep lcov.info || echo "No lcov.info files found"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage/
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true
      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7
      - name: Upload logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-logs
          path: |
            ./**/*.log
            ./npm-debug.log*
            ./coverage/**/*
          retention-days: 7
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs:
      - coverage
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Read .nvmrc
        id: nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> "$GITHUB_OUTPUT"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NODE_VERSION }}
          cache: npm
      - name: Install dependencies
        run: HUSKY=0 npm ci
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
      - name: SonarCloud Scan
        if: ${{ github.event_name != 'pull_request' }}
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >-
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.organization=${{ github.repository_owner }} -Dsonar.host.url=https://sonarcloud.io
      - name: SonarCloud Scan with PR Decoration
        if: ${{ github.event_name == 'pull_request' }}
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >-
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.organization=${{ github.repository_owner }} -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.branch=${{
            github.head_ref }} -Dsonar.pullrequest.base=${{ github.base_ref }} -Dsonar.pullrequest.github.repository=${{
            github.repository }}
      - name: Upload logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: sonarcloud-logs
          path: |
            ./**/*.log
            ./npm-debug.log*
          retention-days: 7
  validate:
    name: Validate
    needs:
      - lint
      - type-check
      - test
      - coverage
      - sonarcloud
      - security
      - e2e
      - snapshot
    runs-on: ubuntu-latest
    steps:
      - name: All checks passed
        run: echo "All validation checks have passed!"
  upload-logs:
    name: Upload Logs
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - lint
      - type-check
      - test
      - coverage
      - e2e
      - security
      - sonarcloud
      - validate
      - snapshot
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Diagnose GitHub Actions environment
        run: |
          echo "Diagnosing GitHub Actions environment..."
          echo "GitHub Actions version:"
          echo "Runner OS: ${{ runner.os }}"
          echo "GitHub API URL: ${{ github.api_url }}"

          # Check connectivity to GitHub
          echo "Testing connectivity to GitHub..."
          curl -s -o /dev/null -w "GitHub API Status: %{http_code}\n" "${{ github.api_url }}"

          # Check if actions directory exists
          echo "Checking actions directory..."
          ls -la "$GITHUB_ACTION_PATH" || echo "GITHUB_ACTION_PATH not available"

          # Check GitHub token permissions
          echo "Checking GitHub token permissions..."
          curl -s -H "Authorization: token ${{ github.token }}" "${{ github.api_url }}/rate_limit" | grep "rate"
      - name: Create logs directory
        run: mkdir -p logs
      - name: Check runner environment
        run: |
          {
            echo "Checking runner environment..."
            echo "Runner OS: ${{ runner.os }}"
            echo "Runner Name: ${{ runner.name }}"
            echo "Runner Temp: ${{ runner.temp }}"
            echo "Runner Tool Cache: ${{ runner.tool_cache }}"

            echo "System information:"
            uname -a

            echo "Disk space:"
            df -h

            echo "Memory information:"
            free -h || echo "free command not available"

            echo "Node.js version:"
            node -v || echo "Node.js not available"

            echo "npm version:"
            npm -v || echo "npm not available"
          } > logs/runner_info.txt
      - name: Collect GitHub Actions logs
        run: |
          {
            echo "Collecting GitHub Actions logs for run ${{ github.run_id }}"
            echo "Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            echo "Workflow: ${{ github.workflow }}"
            echo "Event: ${{ github.event_name }}"
            echo "Ref: ${{ github.ref }}"
            echo "SHA: ${{ github.sha }}"
          } > logs/run_info.txt

          {
            echo "Job Status Summary:"
            echo "Lint: ${{ needs.lint.result || 'unknown' }}"
            echo "Type Check: ${{ needs.type-check.result || 'unknown' }}"
            echo "Unit Tests: ${{ needs.test.result || 'unknown' }}"
            echo "Snapshot Tests: ${{ needs.snapshot.result || 'unknown' }}"
            echo "Code Coverage: ${{ needs.coverage.result || 'unknown' }}"
            echo "E2E Tests: ${{ needs.e2e.result || 'unknown' }}"
            echo "Security Check: ${{ needs.security.result || 'unknown' }}"
            echo "SonarCloud Analysis: ${{ needs.sonarcloud.result || 'unknown' }}"
          } > logs/job_status.txt
      - name: Upload logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: workflow-logs-${{ github.run_id }}
          path: logs/
          retention-days: 7
      - name: Set job status environment variables
        run: |
          {
            echo "LINT_RESULT=${{ needs.lint.result || 'unknown' }}"
            echo "TYPE_CHECK_RESULT=${{ needs.type-check.result || 'unknown' }}"
            echo "TEST_RESULT=${{ needs.test.result || 'unknown' }}"
            echo "SNAPSHOT_RESULT=${{ needs.snapshot.result || 'unknown' }}"
            echo "COVERAGE_RESULT=${{ needs.coverage.result || 'unknown' }}"
            echo "E2E_RESULT=${{ needs.e2e.result || 'unknown' }}"
            echo "SECURITY_RESULT=${{ needs.security.result || 'unknown' }}"
            echo "SONARCLOUD_RESULT=${{ needs.sonarcloud.result || 'unknown' }}"
          } >> "$GITHUB_ENV"
      - name: Create comment with logs link
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: >
            const artifactUrl =
            `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/artifacts`;

            const runUrl =
            `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;


            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## CI Workflow Failed ❌\n\nSome jobs in the CI workflow failed. You can view the detailed logs here:\n\n- [Workflow Run](${runUrl})\n- [Workflow Artifacts](${artifactUrl})\n\n### Job Status\n\n- Lint: ${process.env.LINT_RESULT || 'unknown'}\n- Type Check: ${process.env.TYPE_CHECK_RESULT || 'unknown'}\n- Unit Tests: ${process.env.TEST_RESULT || 'unknown'}\n- Snapshot Tests: ${process.env.SNAPSHOT_RESULT || 'unknown'}\n- Code Coverage: ${process.env.COVERAGE_RESULT || 'unknown'}\n- E2E Tests: ${process.env.E2E_RESULT || 'unknown'}\n- Security Check: ${process.env.SECURITY_RESULT || 'unknown'}\n- SonarCloud Analysis: ${process.env.SONARCLOUD_RESULT || 'unknown'}`
            });
