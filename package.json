{
  "name": "thanos",
  "version": "0.0.0",
  "private": true,
  "license": "MIT",
  "type": "module",
  "engines": {
    "node": "20"
  },
  "workspaces": [
    "apps/*"
  ],
  "scripts": {
    "postinstall": "echo 'Please make sure you are using Node.js '$(cat .nvmrc)' (run \"nvm use\" if you have nvm installed)'",
    "start": "concurrently --kill-others-on-fail \"npm run start:api\" \"npm run start:web\"",
    "start:api": "npm run dev --workspace=apps/api",
    "start:web": "npm run dev --workspace=apps/web",
    "build": "npm run build --workspace=apps/api && npm run build --workspace=apps/web",
    "test": "npm run test --workspace=apps/api && npm run test --workspace=apps/web",
    "test:all": "npm run test && npm run test:e2e",
    "test:unit": "npm run test",
    "test:snapshot": "npm run test --workspace=apps/web -- --testPathPattern=snapshot",
    "test:e2e": "./scripts/e2e.sh",
    "local-ci": "./scripts/local-ci.sh",
    "fix-node-version": "echo 'To switch to Node.js '$(cat .nvmrc)', please run: source ./scripts/switch-node.sh'",
    "clean:deep": "./scripts/clean-deep.sh",
    "cleanup:test-reports": "rm -f test-report.xml */test-report.xml **/test-report.xml && node scripts/cleanup-test-reports.js",
    "validate:node-version": "./scripts/validate-node-version.sh",
    "lint": "npm run lint --workspace=apps/web && npm run lint --workspace=apps/api && npm run lint:md && npm run lint:sh && npm run lint:yaml",
    "lint:md": "markdownlint-cli2 --config configs/lint/.markdownlint-cli2.jsonc \"**/*.md\"",
    "lint:md:fix": "markdownlint-cli2 --config configs/lint/.markdownlint-cli2.jsonc --fix \"**/*.md\"",
    "lint:sh": "shellcheck scripts/*.sh",
    "lint:yaml": "yamllint -c configs/lint/.yamllint .github/**/*.yml",
    "docker:ci": "./scripts/docker-ci.sh",
    "format": "prettier --config configs/lint/.prettierrc --ignore-path configs/lint/.prettierignore --write \"**/*.{js,jsx,mjs,ts,tsx}\" && npm run format:md && npm run format:sh && npm run format:yaml",
    "format:md": "prettier --config configs/lint/.prettierrc --ignore-path configs/lint/.prettierignore --write \"**/*.md\"",
    "format:sh": "shfmt -i 2 -ci -w scripts/*.sh",
    "format:yaml": "prettier --config configs/lint/.prettierrc --ignore-path configs/lint/.prettierignore --write \".github/**/*.{yml,yaml}\"",
    "clean": "rm -rf dist apps/*/dist tmp node_modules/.cache",
    "coverage": "rm -rf coverage && npm run test:coverage --workspace=apps/api && npm run test:coverage --workspace=apps/web && node scripts/combine-coverage.js",
    "coverage:report": "rm -rf coverage && npm run test:coverage --workspace=apps/api -- --coverageReporters=\"text-summary\" --coverageReporters=\"html\" --coverageReporters=\"lcov\" && npm run test:coverage --workspace=apps/web -- --coverageReporters=\"text-summary\" --coverageReporters=\"html\" --coverageReporters=\"lcov\" && node scripts/combine-coverage.js",
    "coverage:open": "npm run coverage:all:open",
    "coverage:all": "rm -rf coverage && npm run test:coverage --workspace=apps/api -- --coverageReporters=\"text-summary\" --coverageReporters=\"html\" --coverageReporters=\"lcov\" && npm run test:coverage --workspace=apps/web -- --coverageReporters=\"text-summary\" --coverageReporters=\"html\" --coverageReporters=\"lcov\" && node scripts/combine-coverage.js",
    "coverage:all:open": "npm run coverage:all && echo '\nCoverage reports generated at:' && echo 'Web: file://${PWD}/coverage/apps/web/lcov-report/index.html' && echo 'API: file://${PWD}/coverage/apps/api/lcov-report/index.html' && open coverage/apps/web/lcov-report/index.html coverage/apps/api/lcov-report/index.html",
    "test:sonar": "rm -rf coverage && JEST_SONAR_REPORTER_OUTPUT_DIR='./coverage' JEST_SONAR_REPORTER_OUTPUT_NAME='sonar-report.xml' npm run test:coverage --workspace=apps/api -- --testResultsProcessor=jest-sonar-reporter --coverageReporters=\"lcov\" && npm run test:coverage --workspace=apps/web -- --testResultsProcessor=jest-sonar-reporter --coverageReporters=\"lcov\" && node scripts/combine-coverage.js && node scripts/cleanup-test-reports.js",
    "test:component:fresh": "rm -rf coverage && npm run test --workspace=apps/web -- --testPathPattern=$(echo $npm_config_component || echo 'ClickableButton') --coverage && echo '\nCoverage report generated at: file://${PWD}/coverage/apps/web/index.html'",
    "test:component:fresh:open": "rm -rf coverage && npm run test --workspace=apps/web -- --testPathPattern=$(echo $npm_config_component || echo 'ClickableButton') --coverage && echo '\nCoverage report generated at:' && echo 'Web: file://${PWD}/coverage/apps/web/index.html' && open coverage/apps/web/index.html",
    "prepare": "[ -n \"$CI\" ] || [ -n \"$HUSKY\" -a \"$HUSKY\" = \"0\" ] || husky",
    "preinstall": "command -v npx >/dev/null && npx --no-install npm-force-resolutions || echo 'Skipping npm-force-resolutions'",
    "pre-commit": "npm run validate:node-version && LINT_STAGED_CONFIG_FILE=configs/lint/.lintstagedrc.json lint-staged",
    "security:check": "snyk test",
    "security:fix": "snyk wizard",
    "update:deps": "npm audit fix && npm install && git add package.json package-lock.json && git commit -m 'Claude: Update dependencies and sync package-lock.json'",
    "update:deps:force": "npm audit fix --force && npm install && git add package.json package-lock.json && git commit -m 'Claude: Update dependencies with breaking changes and sync package-lock.json'",
    "generate-sonar-report": "node scripts/jest-to-sonar.js",
    "sonar": "node -e \"if(!process.env.SONAR_TOKEN){console.error('\\x1b[31mError: SONAR_TOKEN environment variable is not set.\\x1b[0m\\nPlease set it with your SonarCloud token:\\n\\x1b[33mexport SONAR_TOKEN=your-sonar-token\\x1b[0m\\n\\nYou can generate a token at: https://sonarcloud.io/account/security/');process.exit(1)}\" && sonar-scanner -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=garricn_thanos -Dsonar.organization=garricn -Dsonar.config=configs/quality/sonar-project.properties",
    "sonar:local": "node -e \"if(!process.env.SONAR_TOKEN){console.error('\\x1b[31mError: SONAR_TOKEN environment variable is not set.\\x1b[0m\\nPlease set it with your SonarCloud token:\\n\\x1b[33mexport SONAR_TOKEN=your-sonar-token\\x1b[0m\\n\\nYou can generate a token at: https://sonarcloud.io/account/security/');process.exit(1)}\" && npm run test:sonar && sonar-scanner -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=garricn_thanos -Dsonar.organization=garricn -Dsonar.config=configs/quality/sonar-project.properties",
    "sonar:branch": "node -e \"if(!process.env.SONAR_TOKEN){console.error('\\x1b[31mError: SONAR_TOKEN environment variable is not set.\\x1b[0m\\nPlease set it with your SonarCloud token:\\n\\x1b[33mexport SONAR_TOKEN=your-sonar-token\\x1b[0m\\n\\nYou can generate a token at: https://sonarcloud.io/account/security/');process.exit(1)}\" && npm run coverage:all && sonar-scanner -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=garricn_thanos -Dsonar.organization=garricn -Dsonar.branch.name=$(git rev-parse --abbrev-ref HEAD) -Dsonar.config=configs/quality/sonar-project.properties",
    "sonar:report": "node -e \"if(!process.env.SONAR_TOKEN){console.error('\\x1b[31mError: SONAR_TOKEN environment variable is not set.\\x1b[0m\\nPlease set it with your SonarCloud token:\\n\\x1b[33mexport SONAR_TOKEN=your-sonar-token\\x1b[0m\\n\\nYou can generate a token at: https://sonarcloud.io/account/security/');process.exit(1)}\" && echo '\\n\\x1b[1mSonarCloud Analysis Report for garricn_thanos\\x1b[0m\\n' && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/measures/component?component=garricn_thanos&metricKeys=bugs,vulnerabilities,security_hotspots,code_smells,coverage,duplicated_lines_density,ncloc' | jq -r '.component | \"\\nCode Quality Metrics:\\n  Lines of Code: \\(.measures[] | select(.metric == \"ncloc\") | .value)\\n  Bugs: \\(.measures[] | select(.metric == \"bugs\") | .value)\\n  Vulnerabilities: \\(.measures[] | select(.metric == \"vulnerabilities\") | .value)\\n  Security Hotspots: \\(.measures[] | select(.metric == \"security_hotspots\") | .value)\\n  Code Smells: \\(.measures[] | select(.metric == \"code_smells\") | .value)\\n  Coverage: \\(.measures[] | select(.metric == \"coverage\") | .value)%\\n  Duplicated Lines: \\(.measures[] | select(.metric == \"duplicated_lines_density\") | .value)%\\n\"' && echo '\\nIssues Summary:' && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=10&facets=severities,types' | jq -r '.facets[] | \"\\n\\(.property | ascii_upcase):\\n\\(.values[] | \"  \\(.val): \\(.count)\")\"' && echo '\\n\\nView full report at: https://sonarcloud.io/dashboard?id=garricn_thanos\\n'",
    "sonar:detailed-report": "node -e \"if(!process.env.SONAR_TOKEN){console.error('\\x1b[31mError: SONAR_TOKEN environment variable is not set.\\x1b[0m\\nPlease set it with your SonarCloud token:\\n\\x1b[33mexport SONAR_TOKEN=your-sonar-token\\x1b[0m\\n\\nYou can generate a token at: https://sonarcloud.io/account/security/');process.exit(1)}\" && echo '\\n\\x1b[1mDetailed SonarCloud Analysis Report for garricn_thanos\\x1b[0m\\n' > sonar-detailed-report.md && echo '# SonarCloud Detailed Analysis\\n\\n## Project Overview\\n' >> sonar-detailed-report.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/measures/component?component=garricn_thanos&metricKeys=bugs,vulnerabilities,security_hotspots,code_smells,coverage,duplicated_lines_density,ncloc,sqale_index,reliability_rating,security_rating,sqale_rating' | jq -r '.component | \"- **Lines of Code**: \\(.measures[] | select(.metric == \"ncloc\") | .value // \"N/A\")\\n- **Technical Debt (minutes)**: \\(.measures[] | select(.metric == \"sqale_index\") | .value // \"N/A\")\\n- **Reliability Rating**: \\(.measures[] | select(.metric == \"reliability_rating\") | .value // \"N/A\")\\n- **Security Rating**: \\(.measures[] | select(.metric == \"security_rating\") | .value // \"N/A\")\\n- **Maintainability Rating**: \\(.measures[] | select(.metric == \"sqale_rating\") | .value // \"N/A\")\\n- **Coverage**: \\(.measures[] | select(.metric == \"coverage\") | .value // \"N/A\")%\\n- **Duplicated Lines**: \\(.measures[] | select(.metric == \"duplicated_lines_density\") | .value // \"N/A\")%\\n\"' >> sonar-detailed-report.md && echo '\\n## Issues by Severity\\n' >> sonar-detailed-report.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=100&facets=severities' | jq -r '.facets[] | select(.property == \"severities\") | .values[] | \"- **\\(.val)**: \\(.count) issues\"' >> sonar-detailed-report.md || echo '- No severity issues found' >> sonar-detailed-report.md && echo '\\n## Issues by Type\\n' >> sonar-detailed-report.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=100&facets=types' | jq -r '.facets[] | select(.property == \"types\") | .values[] | \"- **\\(.val)**: \\(.count) issues\"' >> sonar-detailed-report.md || echo '- No type issues found' >> sonar-detailed-report.md && echo '\\n## Top Issues (Detailed)\\n' >> sonar-detailed-report.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=50&s=severity,status&resolved=false' | jq -r 'if .issues | length > 0 then .issues[] | \"### \\(.severity | ascii_upcase): \\(.message)\\n- **File**: \\(.component | split(\":\") | .[1] // .)\\n- **Line**: \\(.line // \"N/A\")\\n- **Type**: \\(.type)\\n- **Effort**: \\(.effort // \"N/A\")\\n- **Tags**: \\(.tags | join(\", \"))\\n\" else \"No issues found.\" end' >> sonar-detailed-report.md && echo '\\n## Hotspots\\n' >> sonar-detailed-report.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/hotspots/search?projectKey=garricn_thanos&ps=20' | jq -r 'if .hotspots | length > 0 then .hotspots[] | \"### \\(.vulnerabilityProbability): \\(.message)\\n- **File**: \\(.component | split(\":\") | .[1] // .)\\n- **Line**: \\(.line // \"N/A\")\\n- **Status**: \\(.status)\\n\" else \"No security hotspots found.\" end' >> sonar-detailed-report.md && echo '\\n## Improvement Tasks\\n\\nBased on the analysis, consider the following improvement tasks:\\n\\n1. Address all BLOCKER and CRITICAL issues first\\n2. Focus on security hotspots\\n3. Improve test coverage for core components\\n4. Reduce code duplication\\n5. Address code smells to improve maintainability\\n\\n## Next Steps\\n\\n1. Prioritize issues based on severity and effort\\n2. Create specific tasks in your issue tracker\\n3. Set targets for improving key metrics\\n4. Schedule regular reviews of SonarCloud reports\\n' >> sonar-detailed-report.md && echo \"\\n\\nDetailed report saved to sonar-detailed-report.md\\n\"",
    "sonar:tasks": "node -e \"if(!process.env.SONAR_TOKEN){console.error('\\x1b[31mError: SONAR_TOKEN environment variable is not set.\\x1b[0m\\nPlease set it with your SonarCloud token:\\n\\x1b[33mexport SONAR_TOKEN=your-sonar-token\\x1b[0m\\n\\nYou can generate a token at: https://sonarcloud.io/account/security/');process.exit(1)}\" && echo '# SonarCloud Improvement Tasks\\n\\nGenerated on '$(date)\"\\n\\n## High Priority Tasks\\n\" > sonar-tasks.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=20&s=severity,status&resolved=false&severities=BLOCKER,CRITICAL' | jq -r 'if .issues | length > 0 then .issues[] | \"- [ ] Fix \\(.severity | ascii_upcase) issue: \\(.message) in \\(.component | split(\":\") | .[1] // .) (line \\(.line // \"N/A\"))\" else \"- No high priority issues found\" end' >> sonar-tasks.md && echo \"\\n\\n## Medium Priority Tasks\\n\" >> sonar-tasks.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=20&s=severity,status&resolved=false&severities=MAJOR' | jq -r 'if .issues | length > 0 then .issues[] | \"- [ ] Fix MAJOR issue: \\(.message) in \\(.component | split(\":\") | .[1] // .) (line \\(.line // \"N/A\"))\" else \"- No medium priority issues found\" end' >> sonar-tasks.md && echo \"\\n\\n## Security Tasks\\n\" >> sonar-tasks.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/hotspots/search?projectKey=garricn_thanos&ps=10' | jq -r 'if .hotspots | length > 0 then .hotspots[] | \"- [ ] Review security hotspot: \\(.message) in \\(.component | split(\":\") | .[1] // .) (line \\(.line // \"N/A\"))\" else \"- No security hotspots found\" end' >> sonar-tasks.md && echo \"\\n\\n## Technical Debt Tasks\\n\" >> sonar-tasks.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=10&s=effort,severity&resolved=false&types=CODE_SMELL' | jq -r 'if .issues | length > 0 then .issues[] | \"- [ ] Refactor: \\(.message) in \\(.component | split(\":\") | .[1] // .) (effort: \\(.effort // \"N/A\"))\" else \"- No code smells found\" end' >> sonar-tasks.md && echo \"\\n\\n## Coverage Improvement Tasks\\n\" >> sonar-tasks.md && echo \"- [ ] Increase overall test coverage (currently $(curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/measures/component?component=garricn_thanos&metricKeys=coverage' | jq -r '.component.measures[0].value // \"N/A\"')%)\\n- [ ] Focus on adding tests for core components\\n- [ ] Ensure all new code has at least 80% test coverage\" >> sonar-tasks.md && echo \"\\n\\nTasks generated in sonar-tasks.md\\n\"",
    "sonar:update-tasks": "npm run sonar:tasks && node -e \"const fs = require('fs'); const tasksContent = fs.readFileSync('TASKS.md', 'utf8'); const sonarTasks = fs.readFileSync('sonar-tasks.md', 'utf8'); const sonarSection = '## SonarCloud Tasks\\n\\n'; let sonarContent = ''; if (sonarTasks.includes('## High Priority Tasks')) { sonarContent += '### High Priority Issues\\n\\n' + sonarTasks.split('## High Priority Tasks')[1].split('## Medium Priority Tasks')[0].replace('- No high priority issues found', '').trim() + '\\n\\n'; } if (sonarTasks.includes('## Medium Priority Tasks')) { sonarContent += '### Medium Priority Issues\\n\\n' + sonarTasks.split('## Medium Priority Tasks')[1].split('## Security Tasks')[0].replace('- No medium priority issues found', '').trim() + '\\n\\n'; } if (sonarTasks.includes('## Security Tasks')) { sonarContent += '### Security Hotspots\\n\\n' + sonarTasks.split('## Security Tasks')[1].split('## Technical Debt Tasks')[0].replace('- No security hotspots found', '').trim() + '\\n\\n'; } if (sonarTasks.includes('## Technical Debt Tasks')) { sonarContent += '### Technical Debt\\n\\n' + sonarTasks.split('## Technical Debt Tasks')[1].split('## Coverage Improvement Tasks')[0].replace('- No code smells found', '').trim() + '\\n\\n'; } if (sonarTasks.includes('## Coverage Improvement Tasks')) { sonarContent += '### Coverage Improvements\\n\\n' + sonarTasks.split('## Coverage Improvement Tasks')[1].split('Tasks generated')[0].trim(); } const sectionExists = tasksContent.includes('## SonarCloud Tasks'); let updatedContent; if (sectionExists) { updatedContent = tasksContent.replace(/## SonarCloud Tasks[\\s\\S]*?(\\n## |$)/, sonarSection + sonarContent + '\\n\\n$1'); } else { updatedContent = tasksContent.replace('# Project Tasks', '# Project Tasks\\n\\n' + sonarSection + sonarContent + '\\n'); } fs.writeFileSync('TASKS.md', updatedContent); console.log('SonarCloud tasks have been integrated into TASKS.md');\"",
    "sonar:update-tasks:formatted": "npm run sonar:update-tasks && npm run format:md",
    "type-check": "npm run typecheck --workspace=apps/web && npm run typecheck --workspace=apps/api",
    "type-check:watch": "npm run typecheck --workspace=apps/web -- --watch",
    "validate": "npm run check:deps && npm run check:outdated && npm-run-all --parallel lint type-check security:check validate:actions validate:node-version && npm run test:all && npm run coverage:all",
    "validate:actions": "./scripts/validate-actions.sh",
    "check:deps": "npm ci --dry-run && npm ls --depth=0",
    "check:outdated": "npm outdated || true"
  },
  "resolutions": {
    "inflight": "1.0.6"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.1.2",
    "axios": "^1.6.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cypress": "^13.6.6",
    "esbuild": "^0.19.12",
    "eslint": "^9.0.0",
    "express": "^4.19.2",
    "fs-extra": "^11.3.0",
    "js-yaml": "^4.1.0",
    "lucide-react": "^0.479.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "shadcn-ui": "^0.9.5",
    "sqlite3": "^5.1.7",
    "tailwind-merge": "^3.0.2",
    "vite": "5.4.12"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.3.0",
    "@eslint/js": "^9.0.0",
    "@testing-library/dom": "10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "16.1.0",
    "@types/express": "^4.17.21",
    "@types/fs-extra": "^11.0.4",
    "@types/jest": "^29.5.12",
    "@types/node": "18.16.9",
    "@types/react": "19.0.0",
    "@types/react-dom": "19.0.0",
    "@types/supertest": "^6.0.2",
    "@typescript-eslint/eslint-plugin": "^8.26.1",
    "@typescript-eslint/parser": "^8.26.1",
    "@vitejs/plugin-react": "^4.2.0",
    "@vitest/ui": "^3.0.0",
    "autoprefixer": "^10.4.20",
    "babel-jest": "^29.7.0",
    "concurrently": "^9.1.2",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-cypress": "^3.5.0",
    "eslint-plugin-import": "2.31.0",
    "eslint-plugin-jsx-a11y": "^6.10.1",
    "eslint-plugin-react": "^7.35.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "glob": "^10.4.5",
    "husky": "^9.1.7",
    "inquirer": "^8.2.5",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "jest-environment-node": "^29.7.0",
    "jest-sonar-reporter": "^2.0.0",
    "jiti": "2.4.2",
    "jsdom": "~22.1.0",
    "lint-staged": "^15.2.2",
    "markdownlint-cli2": "^0.17.2",
    "nodemon": "^3.1.9",
    "npm-force-resolutions": "^0.0.10",
    "npm-run-all": "^4.1.5",
    "postcss": "^8.5.3",
    "prettier": "^3.5.3",
    "snyk": "^1.1260.0",
    "sonarqube-scanner": "^3.5.0",
    "supertest": "^7.0.0",
    "tailwindcss": "^4.0.12",
    "ts-jest": "^29.1.0",
    "ts-node": "10.9.1",
    "ts-node-dev": "^2.0.0",
    "tslib": "^2.3.0",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.19.0",
    "wait-on": "^8.0.3"
  }
}
