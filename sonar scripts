"sonar:report": "node -e \"if(!process.env.SONAR_TOKEN){console.error('\\x1b[31mError: SONAR_TOKEN environment variable is not set.\\x1b[0m\\nPlease set it with your SonarCloud token:\\n\\x1b[33mexport SONAR_TOKEN=your-sonar-token\\x1b[0m\\n\\nYou can generate a token at: https://sonarcloud.io/account/security/');process.exit(1)}\" && echo '\\n\\x1b[1mSonarCloud Analysis Report for garricn_thanos\\x1b[0m\\n' && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/measures/component?component=garricn_thanos&metricKeys=bugs,vulnerabilities,security_hotspots,code_smells,coverage,duplicated_lines_density,ncloc' | jq -r '.component | \"\\nCode Quality Metrics:\\n  Lines of Code: \\(.measures[] | select(.metric == \"ncloc\") | .value)\\n  Bugs: \\(.measures[] | select(.metric == \"bugs\") | .value)\\n  Vulnerabilities: \\(.measures[] | select(.metric == \"vulnerabilities\") | .value)\\n  Security Hotspots: \\(.measures[] | select(.metric == \"security_hotspots\") | .value)\\n  Code Smells: \\(.measures[] | select(.metric == \"code_smells\") | .value)\\n  Coverage: \\(.measures[] | select(.metric == \"coverage\") | .value)%\\n  Duplicated Lines: \\(.measures[] | select(.metric == \"duplicated_lines_density\") | .value)%\\n\"' && echo '\\nIssues Summary:' && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=10&facets=severities,types' | jq -r '.facets[] | \"\\n\\(.property | ascii_upcase):\\n\\(.values[] | \"  \\(.val): \\(.count)\")\"' && echo '\\n\\nView full report at: https://sonarcloud.io/dashboard?id=garricn_thanos\\n'",
    
"sonar:detailed-report": "node -e \"if(!process.env.SONAR_TOKEN){console.error('\\x1b[31mError: SONAR_TOKEN environment variable is not set.\\x1b[0m\\nPlease set it with your SonarCloud token:\\n\\x1b[33mexport SONAR_TOKEN=your-sonar-token\\x1b[0m\\n\\nYou can generate a token at: https://sonarcloud.io/account/security/');process.exit(1)}\" && echo '\\n\\x1b[1mDetailed SonarCloud Analysis Report for garricn_thanos\\x1b[0m\\n' > sonar-detailed-report.md && echo '# SonarCloud Detailed Analysis\\n\\n## Project Overview\\n' >> sonar-detailed-report.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/measures/component?component=garricn_thanos&metricKeys=bugs,vulnerabilities,security_hotspots,code_smells,coverage,duplicated_lines_density,ncloc,sqale_index,reliability_rating,security_rating,sqale_rating' | jq -r '.component | \"- **Lines of Code**: \\(.measures[] | select(.metric == \"ncloc\") | .value // \"N/A\")\\n- **Technical Debt (minutes)**: \\(.measures[] | select(.metric == \"sqale_index\") | .value // \"N/A\")\\n- **Reliability Rating**: \\(.measures[] | select(.metric == \"reliability_rating\") | .value // \"N/A\")\\n- **Security Rating**: \\(.measures[] | select(.metric == \"security_rating\") | .value // \"N/A\")\\n- **Maintainability Rating**: \\(.measures[] | select(.metric == \"sqale_rating\") | .value // \"N/A\")\\n- **Coverage**: \\(.measures[] | select(.metric == \"coverage\") | .value // \"N/A\")%\\n- **Duplicated Lines**: \\(.measures[] | select(.metric == \"duplicated_lines_density\") | .value // \"N/A\")%\\n\"' >> sonar-detailed-report.md && echo '\\n## Issues by Severity\\n' >> sonar-detailed-report.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=100&facets=severities' | jq -r '.facets[] | select(.property == \"severities\") | .values[] | \"- **\\(.val)**: \\(.count) issues\"' >> sonar-detailed-report.md || echo '- No severity issues found' >> sonar-detailed-report.md && echo '\\n## Issues by Type\\n' >> sonar-detailed-report.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=100&facets=types' | jq -r '.facets[] | select(.property == \"types\") | .values[] | \"- **\\(.val)**: \\(.count) issues\"' >> sonar-detailed-report.md || echo '- No type issues found' >> sonar-detailed-report.md && echo '\\n## Top Issues (Detailed)\\n' >> sonar-detailed-report.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=50&s=severity,status&resolved=false' | jq -r 'if .issues | length > 0 then .issues[] | \"### \\(.severity | ascii_upcase): \\(.message)\\n- **File**: \\(.component | split(\":\") | .[1] // .)\\n- **Line**: \\(.line // \"N/A\")\\n- **Type**: \\(.type)\\n- **Effort**: \\(.effort // \"N/A\")\\n- **Tags**: \\(.tags | join(\", \"))\\n\" else \"No issues found.\" end' >> sonar-detailed-report.md && echo '\\n## Hotspots\\n' >> sonar-detailed-report.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/hotspots/search?projectKey=garricn_thanos&ps=20' | jq -r 'if .hotspots | length > 0 then .hotspots[] | \"### \\(.vulnerabilityProbability): \\(.message)\\n- **File**: \\(.component | split(\":\") | .[1] // .)\\n- **Line**: \\(.line // \"N/A\")\\n- **Status**: \\(.status)\\n\" else \"No security hotspots found.\" end' >> sonar-detailed-report.md && echo '\\n## Improvement Tasks\\n\\nBased on the analysis, consider the following improvement tasks:\\n\\n1. Address all BLOCKER and CRITICAL issues first\\n2. Focus on security hotspots\\n3. Improve test coverage for core components\\n4. Reduce code duplication\\n5. Address code smells to improve maintainability\\n\\n## Next Steps\\n\\n1. Prioritize issues based on severity and effort\\n2. Create specific tasks in your issue tracker\\n3. Set targets for improving key metrics\\n4. Schedule regular reviews of SonarCloud reports\\n' >> sonar-detailed-report.md && echo \"\\n\\nDetailed report saved to sonar-detailed-report.md\\n\"",

"sonar:tasks": "node -e \"if(!process.env.SONAR_TOKEN){console.error('\\x1b[31mError: SONAR_TOKEN environment variable is not set.\\x1b[0m\\nPlease set it with your SonarCloud token:\\n\\x1b[33mexport SONAR_TOKEN=your-sonar-token\\x1b[0m\\n\\nYou can generate a token at: https://sonarcloud.io/account/security/');process.exit(1)}\" && echo '# SonarCloud Improvement Tasks\\n\\nGenerated on '$(date)\"\\n\\n## High Priority Tasks\\n\" > sonar-tasks.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=20&s=severity,status&resolved=false&severities=BLOCKER,CRITICAL' | jq -r 'if .issues | length > 0 then .issues[] | \"- [ ] Fix \\(.severity | ascii_upcase) issue: \\(.message) in \\(.component | split(\":\") | .[1] // .) (line \\(.line // \"N/A\"))\" else \"- No high priority issues found\" end' >> sonar-tasks.md && echo \"\\n\\n## Medium Priority Tasks\\n\" >> sonar-tasks.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=20&s=severity,status&resolved=false&severities=MAJOR' | jq -r 'if .issues | length > 0 then .issues[] | \"- [ ] Fix MAJOR issue: \\(.message) in \\(.component | split(\":\") | .[1] // .) (line \\(.line // \"N/A\"))\" else \"- No medium priority issues found\" end' >> sonar-tasks.md && echo \"\\n\\n## Security Tasks\\n\" >> sonar-tasks.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/hotspots/search?projectKey=garricn_thanos&ps=10' | jq -r 'if .hotspots | length > 0 then .hotspots[] | \"- [ ] Review security hotspot: \\(.message) in \\(.component | split(\":\") | .[1] // .) (line \\(.line // \"N/A\"))\" else \"- No security hotspots found\" end' >> sonar-tasks.md && echo \"\\n\\n## Technical Debt Tasks\\n\" >> sonar-tasks.md && curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/issues/search?componentKeys=garricn_thanos&ps=10&s=effort,severity&resolved=false&types=CODE_SMELL' | jq -r 'if .issues | length > 0 then .issues[] | \"- [ ] Refactor: \\(.message) in \\(.component | split(\":\") | .[1] // .) (effort: \\(.effort // \"N/A\"))\" else \"- No code smells found\" end' >> sonar-tasks.md && echo \"\\n\\n## Coverage Improvement Tasks\\n\" >> sonar-tasks.md && echo \"- [ ] Increase overall test coverage (currently $(curl -s -u ${SONAR_TOKEN}: 'https://sonarcloud.io/api/measures/component?component=garricn_thanos&metricKeys=coverage' | jq -r '.component.measures[0].value // \"N/A\"')%)\\n- [ ] Focus on adding tests for core components\\n- [ ] Ensure all new code has at least 80% test coverage\" >> sonar-tasks.md && echo \"\\n\\nTasks generated in sonar-tasks.md\\n\"",

"sonar:update-tasks": "npm run sonar:tasks && node -e \"const fs = require('fs'); const tasksContent = fs.readFileSync('TASKS.md', 'utf8'); const sonarTasks = fs.readFileSync('sonar-tasks.md', 'utf8'); const sonarSection = '## SonarCloud Tasks\\n\\n'; let sonarContent = ''; if (sonarTasks.includes('## High Priority Tasks')) { sonarContent += '### High Priority Issues\\n\\n' + sonarTasks.split('## High Priority Tasks')[1].split('## Medium Priority Tasks')[0].replace('- No high priority issues found', '').trim() + '\\n\\n'; } if (sonarTasks.includes('## Medium Priority Tasks')) { sonarContent += '### Medium Priority Issues\\n\\n' + sonarTasks.split('## Medium Priority Tasks')[1].split('## Security Tasks')[0].replace('- No medium priority issues found', '').trim() + '\\n\\n'; } if (sonarTasks.includes('## Security Tasks')) { sonarContent += '### Security Hotspots\\n\\n' + sonarTasks.split('## Security Tasks')[1].split('## Technical Debt Tasks')[0].replace('- No security hotspots found', '').trim() + '\\n\\n'; } if (sonarTasks.includes('## Technical Debt Tasks')) { sonarContent += '### Technical Debt\\n\\n' + sonarTasks.split('## Technical Debt Tasks')[1].split('## Coverage Improvement Tasks')[0].replace('- No code smells found', '').trim() + '\\n\\n'; } if (sonarTasks.includes('## Coverage Improvement Tasks')) { sonarContent += '### Coverage Improvements\\n\\n' + sonarTasks.split('## Coverage Improvement Tasks')[1].split('Tasks generated')[0].trim(); } const sectionExists = tasksContent.includes('## SonarCloud Tasks'); let updatedContent; if (sectionExists) { updatedContent = tasksContent.replace(/## SonarCloud Tasks[\\s\\S]*?(\\n## |$)/, sonarSection + sonarContent + '\\n\\n$1'); } else { updatedContent = tasksContent.replace('# Project Tasks', '# Project Tasks\\n\\n' + sonarSection + sonarContent + '\\n'); } fs.writeFileSync('TASKS.md', updatedContent); console.log('SonarCloud tasks have been integrated into TASKS.md');\"",
    